// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingCart.Data.Data;

#nullable disable

namespace ShoppingCart.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("ShoppingCart.Data.Models.Cart.CartModel", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductModelProductID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("CartID");

                    b.HasIndex("ProductModelProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.Product.CategoryProductModel", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryNames")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.Product.ProductModel", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryProductModelCategoryID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Price")
                        .HasColumnType("REAL");

                    b.Property<float?>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryProductModelCategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.User.RoleModel", b =>
                {
                    b.Property<Guid>("RoleID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<byte>("RoleType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoleModelRoleID")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.HasIndex("RoleModelRoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.Cart.CartModel", b =>
                {
                    b.HasOne("ShoppingCart.Data.Models.Product.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModelProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCart.Data.Models.User.UserModel", "User")
                        .WithMany("CartModels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.Product.ProductModel", b =>
                {
                    b.HasOne("ShoppingCart.Data.Models.Product.CategoryProductModel", null)
                        .WithMany("ProductModels")
                        .HasForeignKey("CategoryProductModelCategoryID");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.User.UserModel", b =>
                {
                    b.HasOne("ShoppingCart.Data.Models.User.RoleModel", null)
                        .WithMany("UserModels")
                        .HasForeignKey("RoleModelRoleID");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.Product.CategoryProductModel", b =>
                {
                    b.Navigation("ProductModels");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.User.RoleModel", b =>
                {
                    b.Navigation("UserModels");
                });

            modelBuilder.Entity("ShoppingCart.Data.Models.User.UserModel", b =>
                {
                    b.Navigation("CartModels");
                });
#pragma warning restore 612, 618
        }
    }
}
